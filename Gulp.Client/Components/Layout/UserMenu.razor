@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider

<AuthorizeView>
    <Authorized>
        <div class="relative">
            <div class="relative">
                <button class="flex items-center gap-2 bg-gradient-to-br from-blue-500/80 to-purple-600/80 border border-white/30 text-white px-4 py-2 rounded-2xl cursor-pointer transition-all duration-300 text-sm font-medium shadow-lg hover:from-blue-500/90 hover:to-purple-600/90 hover:-translate-y-0.5 hover:shadow-xl md:px-4 md:py-2 max-md:px-2" @onclick="@ToggleDropdown">
                    <i class="fas fa-user-circle"></i>
                    <span class="font-medium hidden md:inline">@(GetUserName())</span>
                    <i class="fas fa-chevron-down text-xs transition-transform duration-200 @(isDropdownOpen ? "rotate-180" : "")"></i>
                </button>

                @if (isDropdownOpen)
                {
                    <div class="absolute top-full right-0 mt-2 bg-white border border-blue-500/20 rounded-3xl shadow-2xl min-w-[220px] z-[1000] overflow-hidden backdrop-blur-md max-md:right-[-1rem] max-md:min-w-[180px]">
                        <div class="p-4 bg-gradient-to-br from-blue-500/5 to-purple-600/5">
                            <div>
                                <strong class="block text-gray-700 text-sm mb-1">@GetFullName()</strong>
                                <small class="text-gray-500 text-xs">@GetEmail()</small>
                            </div>
                        </div>
                        <hr class="m-0 border-0 border-t border-gray-200" />
                        <button class="flex items-center gap-3 w-full px-4 py-3 border-0 bg-transparent text-gray-700 text-sm cursor-pointer transition-colors duration-200 text-left hover:bg-gray-100" @onclick="@(() => Navigation.NavigateTo("/"))">
                            <i class="fas fa-home w-4 text-center"></i>
                            Today
                        </button>
                        <button class="flex items-center gap-3 w-full px-4 py-3 border-0 bg-transparent text-gray-700 text-sm cursor-pointer transition-colors duration-200 text-left hover:bg-gray-100" @onclick="@(() => Navigation.NavigateTo("/history"))">
                            <i class="fas fa-history w-4 text-center"></i>
                            History
                        </button>
                        <hr class="m-0 border-0 border-t border-gray-200" />
                        <button class="flex items-center gap-3 w-full px-4 py-3 border-0 bg-transparent text-red-600 text-sm cursor-pointer transition-colors duration-200 text-left hover:bg-red-50" @onclick="@HandleLogout">
                            <i class="fas fa-sign-out-alt w-4 text-center"></i>
                            Sign Out
                        </button>
                    </div>
                }
            </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public UserDto? CurrentUser { get; set; }

    private bool isDropdownOpen = false;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private async Task HandleLogout()
    {
        isDropdownOpen = false;

        try
        {
            await Http.DeleteAsync("api/sessions/current");

            // Notify the authentication state provider
            if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
            {
                customProvider.NotifyUserLogout();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }

        Navigation.NavigateTo("/login");
    }

    private string GetUserName()
    {
        if (AuthenticationStateTask == null) return "User";

        var authState = AuthenticationStateTask.Result;
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            return authState.User.FindFirst("FirstName")?.Value ?? "User";
        }

        return "User";
    }

    private string GetFullName()
    {
        if (AuthenticationStateTask == null) return "User";

        var authState = AuthenticationStateTask.Result;
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            var firstName = authState.User.FindFirst("FirstName")?.Value ?? "";
            var lastName = authState.User.FindFirst("LastName")?.Value ?? "";
            return $"{firstName} {lastName}".Trim();
        }

        return "User";
    }

    private string GetEmail()
    {
        if (AuthenticationStateTask == null) return "";

        var authState = AuthenticationStateTask.Result;
        if (authState?.User?.Identity?.IsAuthenticated == true)
        {
            return authState.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "";
        }

        return "";
    }

    protected override void OnInitialized()
    {
        // Close dropdown when clicking outside (would need JS interop for full implementation)
    }
}
