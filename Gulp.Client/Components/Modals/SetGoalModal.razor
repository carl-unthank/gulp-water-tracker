@using Gulp.Shared.DTOs

<!-- Enhanced Modal Backdrop -->
@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 flex items-center justify-center p-4" @onclick="CloseModal">
        <!-- Modern Modal Content -->
        <div class="bg-white rounded-3xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-hidden transform transition-all duration-300" @onclick:stopPropagation="true">
            <!-- Enhanced Modal Header -->
            <div class="bg-gradient-to-br from-blue-500 via-blue-600 to-purple-600 text-white p-8 text-center relative overflow-hidden">
                <!-- Consistent Background Pattern -->
                <div class="absolute inset-0 opacity-10">
                    <svg class="w-full h-full" viewBox="0 0 100 100" fill="none">
                        <defs>
                            <pattern id="goal-modal-grid" width="15" height="15" patternUnits="userSpaceOnUse">
                                <circle cx="7.5" cy="7.5" r="1" fill="currentColor"/>
                            </pattern>
                        </defs>
                        <rect width="100" height="100" fill="url(#goal-modal-grid)" />
                    </svg>
                </div>

                <div class="relative z-10">
                    <div class="w-16 h-16 bg-white/20 rounded-3xl flex items-center justify-center mx-auto mb-4 backdrop-blur-sm shadow-lg">
                        <span class="text-3xl">ðŸŽ¯</span>
                    </div>
                    <h2 class="text-2xl font-bold mb-2">Set Daily Goal</h2>
                    <p class="text-blue-100 text-sm">Choose your hydration target</p>
                </div>
            </div>

            <!-- Enhanced Modal Body -->
            <div class="p-8 space-y-8">
                <!-- Goal Amount -->
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Daily Target</h3>
                    <div class="space-y-4">
                        <div class="relative">
                            <input type="number" 
                                   @bind="goalAmount" 
                                   @bind:event="oninput"
                                   min="500" 
                                   max="5000" 
                                   step="100"
                                   placeholder="Enter daily goal"
                                   class="w-full px-4 py-3 text-lg font-semibold text-center border-2 border-gray-200 rounded-xl focus:border-green-500 focus:ring-0 transition-colors" />
                            <div class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">ml</div>
                        </div>
                        
                        <!-- Goal Slider -->
                        <div class="px-2">
                            <input type="range" 
                                   @bind="goalAmount" 
                                   @bind:event="oninput"
                                   min="500" 
                                   max="5000" 
                                   step="100"
                                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer goal-slider" />
                            <div class="flex justify-between text-xs text-gray-500 mt-1">
                                <span>500ml</span>
                                <span>5000ml</span>
                            </div>
                        </div>
                    </div>
                </div>




            </div>

            <!-- Modal Footer -->
            <div class="p-6 bg-gray-50 flex gap-3">
                <button @onclick="CloseModal" 
                        class="flex-1 px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-100 transition-colors">
                    Cancel
                </button>
                <button @onclick="SetGoal" 
                        disabled="@(goalAmount <= 0 || isSubmitting)"
                        class="flex-1 px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl font-medium hover:from-green-600 hover:to-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-2">
                    @if (isSubmitting)
                    {
                        <div class="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        <span>Setting...</span>
                    }
                    else
                    {
                        <span>Set Goal</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<style>
    .goal-slider::-webkit-slider-thumb {
        appearance: none;
        height: 20px;
        width: 20px;
        border-radius: 50%;
        background: linear-gradient(135deg, #10b981, #059669);
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .goal-slider::-moz-range-thumb {
        height: 20px;
        width: 20px;
        border-radius: 50%;
        background: linear-gradient(135deg, #10b981, #059669);
        cursor: pointer;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<DailyGoalDto> OnSetGoal { get; set; }
    [Parameter] public DailyGoalDto? CurrentGoal { get; set; }

    private int goalAmount = 2000;
    private bool isSubmitting = false;



    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // Load current goal if available
            if (CurrentGoal != null)
            {
                goalAmount = CurrentGoal.TargetAmountMl;
            }
            else
            {
                goalAmount = 2000;
            }
            isSubmitting = false;
        }
    }



    private async Task CloseModal()
    {
        if (!isSubmitting)
        {
            await OnClose.InvokeAsync();
        }
    }

    private async Task SetGoal()
    {
        if (goalAmount <= 0) return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var goalDto = new DailyGoalDto
            {
                TargetAmountMl = goalAmount
            };

            await OnSetGoal.InvokeAsync(goalDto);
            await CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error setting goal: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }


}
