@using Gulp.Shared.DTOs
@inject IJSRuntime JSRuntime

<!-- Enhanced Modal Backdrop -->
@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 flex items-center justify-center p-4" @onclick="CloseModal">
        <!-- Modern Modal Content -->
        <div class="bg-white rounded-3xl shadow-2xl max-w-lg w-full max-h-[95vh] overflow-y-auto transform transition-all duration-300" @onclick:stopPropagation="true">
            <!-- Enhanced Modal Header -->
            <div class="bg-gradient-to-br from-blue-500 via-blue-600 to-purple-600 text-white p-6 text-center relative overflow-hidden">
                <!-- Consistent Background Pattern -->
                <div class="absolute inset-0 opacity-10">
                    <svg class="w-full h-full" viewBox="0 0 100 100" fill="none">
                        <defs>
                            <pattern id="modal-grid" width="15" height="15" patternUnits="userSpaceOnUse">
                                <circle cx="7.5" cy="7.5" r="1" fill="currentColor"/>
                            </pattern>
                        </defs>
                        <rect width="100" height="100" fill="url(#modal-grid)" />
                    </svg>
                </div>

                <div class="relative z-10">
                    <div class="w-16 h-16 bg-white/20 rounded-3xl flex items-center justify-center mx-auto mb-4 backdrop-blur-sm shadow-lg">
                        <span class="text-3xl">ðŸ’§</span>
                    </div>
                    <h2 class="text-2xl font-bold mb-2">@(isEditMode ? "Update Hydration" : "Add Water")</h2>
                    <p class="text-blue-100 text-sm">@(isEditMode ? "Modify your water intake" : "Track your hydration")</p>
                </div>
            </div>

            <!-- Enhanced Modal Body -->
            <div class="p-6 space-y-6">
                <!-- Quick Add Options -->
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-4 text-center">Choose Amount</h3>
                    <div class="grid grid-cols-3 gap-3 mb-4">
                        @foreach (var amount in QuickAmounts)
                        {
                            <button @onclick="() => SelectAmount(amount.AmountMl)"
                                    class="group relative overflow-hidden rounded-xl border-2 transition-all duration-200 hover:scale-105 @GetQuickButtonClass(amount.AmountMl)">
                                <div class="p-3 text-center">
                                    <div class="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center mx-auto mb-2">
                                        <span class="text-lg text-white">@amount.Icon</span>
                                    </div>
                                    <div class="text-sm font-bold text-gray-900">@amount.AmountMl ml</div>
                                    <div class="text-xs text-gray-600">@amount.Label</div>
                                </div>
                            </button>
                        }

                        <!-- Custom Amount Button -->
                        <button @onclick="() => ToggleCustomAmount()"
                                class="group relative overflow-hidden rounded-xl border-2 transition-all duration-200 hover:scale-105 @GetCustomButtonClass()">
                            <div class="p-3 text-center">
                                <div class="w-8 h-8 bg-gradient-to-br from-purple-400 to-purple-600 rounded-lg flex items-center justify-center mx-auto mb-2">
                                    <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                                    </svg>
                                </div>
                                <div class="text-sm font-bold text-gray-900">Custom</div>
                                <div class="text-xs text-gray-600">Set Amount</div>
                            </div>
                        </button>
                    </div>
                </div>

                <!-- Custom Amount Slider (shown when custom is selected) -->
                @if (showCustomAmount)
                {
                    <div>
                        <div class="space-y-4">
                            <div class="relative">
                                <input type="number"
                                       @bind="selectedAmount"
                                       @bind:event="oninput"
                                       min="1"
                                       max="2000"
                                       step="50"
                                       placeholder="Enter amount"
                                       class="w-full px-4 py-3 text-lg font-semibold text-center border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:ring-0 transition-colors" />
                                <div class="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">ml</div>
                            </div>

                            <!-- Amount Slider -->
                            <div class="px-2">
                                <input type="range"
                                       @bind="selectedAmount"
                                       @bind:event="oninput"
                                       min="50"
                                       max="2000"
                                       step="50"
                                       class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider" />
                                <div class="flex justify-between text-xs text-gray-500 mt-1">
                                    <span>50ml</span>
                                    <span>2000ml</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Time Selection -->
                <div>
                    <h3 class="text-base font-semibold text-gray-900 mb-3">Time</h3>
                    <div class="relative">
                        <input type="datetime-local"
                               @bind="selectedTime"
                               @oninput="ValidateDateTime"
                               max="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")"
                               class="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:ring-0 transition-all duration-300 bg-gradient-to-r from-gray-50 to-blue-50 hover:from-blue-50 hover:to-purple-50 @GetDateTimeInputClass()" />
                        <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                        </div>
                    </div>
                    @if (hasDateTimeError)
                    {
                        <p class="text-red-500 text-sm mt-2 flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Cannot select a future date or time
                        </p>
                    }
                </div>

                <!-- Notes (Optional) -->
                <div>
                    <h3 class="text-lg font-semibold text-gray-900 mb-3">Notes (Optional)</h3>
                    <textarea @bind="notes" 
                              placeholder="Add any notes about this intake..."
                              rows="3"
                              maxlength="500"
                              class="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:ring-0 transition-colors resize-none"></textarea>
                </div>
            </div>

            <!-- Modal Footer -->
            <div class="p-6 bg-gray-50 flex gap-3">
                <button @onclick="CloseModal" 
                        class="flex-1 px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-xl font-medium hover:bg-gray-100 transition-colors">
                    Cancel
                </button>
                <button @onclick="AddWaterIntake" 
                        disabled="@(selectedAmount <= 0 || isSubmitting)"
                        class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-medium hover:from-blue-600 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center gap-2">
                    @if (isSubmitting)
                    {
                        <div class="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                        <span>Adding...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "Update" : "Add") @selectedAmount ml</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<CreateWaterIntakeDto> OnAddWater { get; set; }
    [Parameter] public EventCallback<UpdateWaterIntakeDto> OnUpdateWater { get; set; }
    [Parameter] public List<QuickAmountDto> QuickAmounts { get; set; } = new();
    [Parameter] public WaterIntakeDto? ExistingIntake { get; set; }

    private int selectedAmount = 0;
    private int customAmount = 250;
    private DateTime selectedTime = DateTime.Now;
    private string notes = "";
    private bool isSubmitting = false;
    private bool showCustomAmount = false;
    private bool hasDateTimeError = false;
    private bool isEditMode => ExistingIntake != null;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            if (isEditMode && ExistingIntake != null)
            {
                // Load existing data for editing
                selectedAmount = ExistingIntake.AmountMl;
                customAmount = ExistingIntake.AmountMl;
                selectedTime = ExistingIntake.ConsumedAt;
                notes = ExistingIntake.Notes ?? "";
                showCustomAmount = !QuickAmounts.Any(q => q.AmountMl == ExistingIntake.AmountMl);
            }
            else
            {
                // Reset form for new entry
                selectedAmount = 0;
                customAmount = 250;
                selectedTime = DateTime.Now;
                notes = "";
                showCustomAmount = false;
            }
            isSubmitting = false;
        }

        // Update selectedAmount when customAmount changes
        if (selectedAmount == 0 || (!QuickAmounts.Any(q => q.AmountMl == selectedAmount) && !showCustomAmount))
        {
            selectedAmount = customAmount;
        }
    }

    private void SelectAmount(int amount)
    {
        selectedAmount = amount;
        customAmount = amount;
        showCustomAmount = false; // Hide custom amount when quick amount is selected
    }

    private void ToggleCustomAmount()
    {
        showCustomAmount = true;
        selectedAmount = customAmount; // Set selected amount to current custom amount
    }



    private string GetQuickButtonClass(int amount)
    {
        if (selectedAmount == amount && !showCustomAmount)
        {
            return "border-blue-500 bg-blue-50 text-blue-700";
        }
        return "border-gray-200 hover:border-blue-300 hover:bg-blue-50 text-gray-700";
    }

    private string GetCustomButtonClass()
    {
        if (showCustomAmount)
        {
            return "border-blue-500 bg-blue-50 text-blue-700";
        }
        return "border-gray-200 hover:border-blue-300 hover:bg-blue-50 text-gray-700";
    }

    private async Task CloseModal()
    {
        if (!isSubmitting)
        {
            await OnClose.InvokeAsync();
        }
    }

    private async Task AddWaterIntake()
    {
        if (selectedAmount <= 0 && customAmount <= 0) return;
        if (hasDateTimeError || selectedTime > DateTime.Now) return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var amount = selectedAmount > 0 ? selectedAmount : customAmount;

            if (isEditMode && ExistingIntake != null)
            {
                var updateDto = new UpdateWaterIntakeDto
                {
                    AmountMl = amount,
                    ConsumedAt = selectedTime,
                    Notes = string.IsNullOrWhiteSpace(notes) ? null : notes.Trim()
                };

                await OnUpdateWater.InvokeAsync(updateDto);
            }
            else
            {
                var createDto = new CreateWaterIntakeDto
                {
                    AmountMl = amount,
                    ConsumedAt = selectedTime,
                    Notes = string.IsNullOrWhiteSpace(notes) ? null : notes.Trim()
                };

                await OnAddWater.InvokeAsync(createDto);
            }

            await CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error {(isEditMode ? "updating" : "adding")} water intake: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ValidateDateTime(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var dateTime))
        {
            hasDateTimeError = dateTime > DateTime.Now;
            StateHasChanged();
        }
    }

    private string GetDateTimeInputClass()
    {
        return hasDateTimeError ? "border-red-500 bg-red-50" : "";
    }
}
