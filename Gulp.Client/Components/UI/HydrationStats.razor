@using Gulp.Shared.DTOs

<div class="bg-white rounded-2xl p-6 shadow-sm border border-gray-100">
    <div class="flex items-center justify-between mb-6">
        <h3 class="text-lg font-semibold text-gray-900">Hydration Stats</h3>
        <div class="flex items-center space-x-2">
            <button @onclick='() => SetPeriod("week")' 
                    class="px-3 py-1 text-sm rounded-lg transition-colors @GetPeriodClass("week")">
                Week
            </button>
            <button @onclick='() => SetPeriod("month")' 
                    class="px-3 py-1 text-sm rounded-lg transition-colors @GetPeriodClass("month")">
                Month
            </button>
        </div>
    </div>

    <!-- Chart Area -->
    <div class="mb-6 overflow-x-auto">
        <div class="@GetChartContainerClass() min-w-full">
            <div class="flex items-end h-40 @GetChartSpacingClass()">
                @foreach (var day in ChartData)
                {
                    <div class="@GetBarContainerClass() flex flex-col items-center">
                        <!-- Bar -->
                        <div class="w-full flex flex-col justify-end h-32 mb-2 relative">
                            <div class="w-full bg-gradient-to-t from-blue-400 to-blue-500 rounded-t-lg transition-all duration-300 hover:from-blue-500 hover:to-blue-600 relative group"
                                 style="--bar-height: @(GetBarHeight(day.TotalIntake))%; height: var(--bar-height)">

                                <!-- Tooltip -->
                                <div class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10">
                                    @day.TotalIntake ml
                                    @if (day.GoalAchieved)
                                    {
                                        <span class="text-green-300">âœ“</span>
                                    }
                                </div>
                            </div>

                            <!-- Goal Line -->
                            @if (day.DailyGoal > 0)
                            {
                                <div class="absolute w-full border-t-2 border-dashed border-gray-300"
                                     style="--goal-position: @(GetBarHeight(day.DailyGoal))%; bottom: var(--goal-position)"></div>
                            }
                        </div>

                        <!-- Day Label -->
                        <div class="@GetLabelClass()">
                            @(selectedPeriod == "week" ? day.Date.ToString("ddd") : day.Date.ToString("dd"))
                        </div>
                    </div>
                }
            </div>

            <!-- Y-axis labels -->
            <div class="flex justify-between text-xs text-gray-400 mt-2">
                <span>0ml</span>
                <span>@MaxValue ml</span>
            </div>
        </div>
    </div>

    <!-- Summary Stats -->
    <div class="grid grid-cols-2 gap-4">
        <div class="text-center p-4 bg-blue-50 rounded-xl">
            <div class="text-2xl font-bold text-blue-600">@WeeklyAverage ml</div>
            <div class="text-sm text-blue-500">Weekly Average</div>
        </div>
        <div class="text-center p-4 bg-green-50 rounded-xl">
            <div class="text-2xl font-bold text-green-600">@MonthlyAverage ml</div>
            <div class="text-sm text-green-500">Monthly Average</div>
        </div>
    </div>

    <!-- Achievement Indicators -->
    <div class="mt-4 flex items-center justify-center space-x-4">
        <div class="flex items-center space-x-2">
            <div class="w-3 h-3 bg-gradient-to-r from-blue-400 to-blue-500 rounded"></div>
            <span class="text-xs text-gray-600">Daily Intake</span>
        </div>
        <div class="flex items-center space-x-2">
            <div class="w-3 h-1 border-t-2 border-dashed border-gray-300"></div>
            <span class="text-xs text-gray-600">Daily Goal</span>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<DailyProgressDto> ProgressData { get; set; } = new();
    
    private string selectedPeriod = "week";
    private List<DailyProgressDto> ChartData = new();
    private int MaxValue => ChartData.Any() ? Math.Max(ChartData.Max(d => d.TotalIntake), ChartData.Max(d => d.DailyGoal)) : 2000;
    private int WeeklyAverage => GetAverageForPeriod(7);
    private int MonthlyAverage => GetAverageForPeriod(30);

    protected override void OnParametersSet()
    {
        UpdateChartData();
    }

    private void SetPeriod(string period)
    {
        selectedPeriod = period;
        UpdateChartData();
        StateHasChanged();
    }

    private string GetPeriodClass(string period)
    {
        return selectedPeriod == period 
            ? "bg-blue-100 text-blue-700 font-medium" 
            : "text-gray-600 hover:bg-gray-100";
    }

    private void UpdateChartData()
    {
        var days = selectedPeriod == "week" ? 7 : 30;
        var endDate = DateTime.Today;
        var startDate = endDate.AddDays(-(days - 1));
        
        ChartData = new List<DailyProgressDto>();
        
        for (var date = startDate; date <= endDate; date = date.AddDays(1))
        {
            var existingData = ProgressData.FirstOrDefault(p => p.Date.Date == date.Date);
            ChartData.Add(existingData ?? new DailyProgressDto
            {
                Date = date,
                TotalIntake = 0,
                DailyGoal = 2000,
                GoalAchieved = false
            });
        }
    }

    private double GetBarHeight(int value)
    {
        if (MaxValue <= 0) return 0;
        return Math.Min(100, (double)value / MaxValue * 100);
    }

    private int GetAverageForPeriod(int days)
    {
        var endDate = DateTime.Today;
        var startDate = endDate.AddDays(-days);

        var periodData = ProgressData
            .Where(p => p.Date.Date >= startDate && p.Date.Date <= endDate)
            .ToList();

        return periodData.Any() ? (int)periodData.Average(p => p.TotalIntake) : 0;
    }

    private string GetChartContainerClass()
    {
        return selectedPeriod == "month" ? "min-w-max" : "";
    }

    private string GetChartSpacingClass()
    {
        return selectedPeriod == "week" ? "space-x-2" : "space-x-1";
    }

    private string GetBarContainerClass()
    {
        return selectedPeriod == "week" ? "flex-1" : "w-6 flex-shrink-0";
    }

    private string GetLabelClass()
    {
        return selectedPeriod == "week"
            ? "text-xs text-gray-500 font-medium"
            : "text-xs text-gray-500 font-medium transform rotate-45 origin-bottom-left mt-2";
    }
}
