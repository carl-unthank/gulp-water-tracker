@page "/register"
@layout AuthLayout
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@using System.Text.Json

<PageTitle>Sign Up - Gulp!</PageTitle>

<div class="space-y-8">
    <!-- Hero Section -->
    <div class="text-center">
        <h2 class="text-3xl font-black text-slate-800 mb-2">
            Join Gulp!
        </h2>
        <p class="text-slate-600 text-lg">Start your healthy journey today</p>
        <div class="w-16 h-1 bg-gradient-to-r from-ocean-500 to-aqua-500 mx-auto mt-4 rounded-full"></div>
    </div>

    <EditForm Model="registerModel" OnValidSubmit="HandleRegister" class="space-y-6">
        <DataAnnotationsValidator />

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-emerald-50 border-l-4 border-emerald-400 text-emerald-700 px-4 py-3 rounded-r-lg shadow-sm">
                <div class="flex items-center">
                    <span class="text-emerald-500 mr-2">‚úÖ</span>
                    @successMessage
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-coral-50 border-l-4 border-coral-400 text-coral-700 px-4 py-3 rounded-r-lg shadow-sm">
                <div class="flex items-center">
                    <span class="text-coral-500 mr-2">‚ö†Ô∏è</span>
                    @errorMessage
                </div>
            </div>
        }

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div class="group">
                <label for="firstName" class="block text-sm font-semibold text-slate-700 mb-3">
                    üë§ First Name
                </label>
                <InputText @bind-Value="registerModel.FirstName"
                           id="firstName"
                           class="w-full px-4 py-4 border-2 rounded-xl focus:ring-4 transition-all duration-300 bg-slate-50 group-hover:bg-white text-slate-800 placeholder-slate-400 valid:border-slate-200 valid:focus:ring-ocean-500/20 valid:focus:border-ocean-500 invalid:border-coral-500 invalid:focus:ring-coral-500/20 invalid:focus:border-coral-600"
                           placeholder="John" />
                <ValidationMessage For="@(() => registerModel.FirstName)" class="text-coral-500 text-sm mt-2 font-medium" />
            </div>
            <div class="group">
                <label for="lastName" class="block text-sm font-semibold text-slate-700 mb-3">
                    üë§ Last Name
                </label>
                <InputText @bind-Value="registerModel.LastName"
                           id="lastName"
                           class="w-full px-4 py-4 border-2 rounded-xl focus:ring-4 transition-all duration-300 bg-slate-50 group-hover:bg-white text-slate-800 placeholder-slate-400 valid:border-slate-200 valid:focus:ring-ocean-500/20 valid:focus:border-ocean-500 invalid:border-coral-500 invalid:focus:ring-coral-500/20 invalid:focus:border-coral-600"
                           placeholder="Doe" />
                <ValidationMessage For="@(() => registerModel.LastName)" class="text-coral-500 text-sm mt-2 font-medium" />
            </div>
        </div>

        <div class="space-y-5">
            <div class="group">
                <label for="email" class="block text-sm font-semibold text-slate-700 mb-3">
                    üìß Email Address
                </label>
                <InputText @bind-Value="registerModel.Email"
                           id="email"
                           type="email"
                           class="w-full px-4 py-4 border-2 rounded-xl focus:ring-4 transition-all duration-300 bg-slate-50 group-hover:bg-white text-slate-800 placeholder-slate-400 valid:border-slate-200 valid:focus:ring-ocean-500/20 valid:focus:border-ocean-500 invalid:border-coral-500 invalid:focus:ring-coral-500/20 invalid:focus:border-coral-600"
                           placeholder="your@email.com" />
                <ValidationMessage For="@(() => registerModel.Email)" class="text-coral-500 text-sm mt-2 font-medium" />
            </div>

            <div class="group">
                <label for="password" class="block text-sm font-semibold text-slate-700 mb-3">
                    üîí Password
                </label>
                <input @bind="registerModel.Password"
                       id="password"
                       type="password"
                       class="w-full px-4 py-4 border-2 rounded-xl focus:ring-4 transition-all duration-300 bg-slate-50 group-hover:bg-white text-slate-800 placeholder-slate-400 valid:border-slate-200 valid:focus:ring-ocean-500/20 valid:focus:border-ocean-500 invalid:border-coral-500 invalid:focus:ring-coral-500/20 invalid:focus:border-coral-600"
                       placeholder="Create a secure password" />
                <ValidationMessage For="@(() => registerModel.Password)" class="text-coral-500 text-sm mt-2 font-medium" />
            </div>

            <div class="group">
                <label for="confirmPassword" class="block text-sm font-semibold text-slate-700 mb-3">
                    üîê Confirm Password
                </label>
                <input @bind="registerModel.ConfirmPassword"
                       id="confirmPassword"
                       type="password"
                       class="w-full px-4 py-4 border-2 rounded-xl focus:ring-4 transition-all duration-300 bg-slate-50 group-hover:bg-white text-slate-800 placeholder-slate-400 valid:border-slate-200 valid:focus:ring-ocean-500/20 valid:focus:border-ocean-500 invalid:border-coral-500 invalid:focus:ring-coral-500/20 invalid:focus:border-coral-600"
                       placeholder="Confirm your password" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-coral-500 text-sm mt-2 font-medium" />
            </div>
        </div>

        <!-- CTA Button -->
        <button type="submit"
                disabled="@(isLoading || isSuccess)"
                class="w-full py-4 px-6 rounded-xl transform transition-all duration-300 disabled:cursor-not-allowed disabled:transform-none font-bold text-lg shadow-xl @GetButtonClass() @GetButtonHoverClass()">
            @if (isSuccess)
            {
                <div class="flex items-center justify-center space-x-3">
                    <span class="text-xl">‚úÖ</span>
                    <span>Account Created! Redirecting...</span>
                </div>
            }
            else if (isLoading)
            {
                <div class="flex items-center justify-center space-x-3">
                    <div class="w-5 h-5 border-3 border-white border-t-transparent rounded-full animate-spin"></div>
                    <span>Creating Account...</span>
                </div>
            }
            else
            {
                <div class="flex items-center justify-center space-x-2">
                    <span>Create Account</span>
                    <span class="text-xl">‚ú®</span>
                </div>
            }
        </button>
    </EditForm>

    <!-- Secondary CTA -->
    <div class="text-center">
        <p class="text-slate-600 text-base">
            Already have an account?
            <a href="/login" class="text-ocean-600 hover:text-ocean-700 font-bold underline decoration-2 underline-offset-2 hover:decoration-ocean-300 transition-all">
                Sign in here
            </a>
        </p>
    </div>
</div>

@code {
    private RegisterDto registerModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;
    private bool isSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var response = await Http.PostAsJsonAsync("api/users", registerModel);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponseDto>();

                if (authResponse?.Success == true)
                {
                    // Show success message
                    isSuccess = true;
                    successMessage = $"Welcome to Gulp, {registerModel.FirstName}! You're now logged in.";
                    StateHasChanged();

                    // Wait a moment for cookie to be set properly
                    await Task.Delay(500);

                    // Notify the authentication state provider that the user has registered and logged in
                    if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.NotifyUserAuthentication(registerModel.Email);
                    }

                    // Wait a moment to show success message, then redirect
                    await Task.Delay(1500);
                    Navigation.NavigateTo("/", true); // Force navigation
                }
                else
                {
                    errorMessage = authResponse?.Message ?? "Registration failed. Please try again.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(errorContent);
                    errorMessage = errorResponse.TryGetProperty("message", out var messageElement)
                        ? messageElement.GetString() ?? "Registration failed. Please try again."
                        : "Registration failed. Please try again.";
                }
                catch
                {
                    errorMessage = "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration exception: {ex.Message}");
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            if (!isSuccess)
            {
                isLoading = false;
            }
            StateHasChanged();
        }
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(registerModel.FirstName) &&
               !string.IsNullOrWhiteSpace(registerModel.LastName) &&
               !string.IsNullOrWhiteSpace(registerModel.Email) &&
               !string.IsNullOrWhiteSpace(registerModel.Password) &&
               !string.IsNullOrWhiteSpace(registerModel.ConfirmPassword) &&
               registerModel.Email.Contains("@") &&
               registerModel.Password.Length >= 6 &&
               registerModel.Password == registerModel.ConfirmPassword;
    }

    private string GetButtonClass()
    {
        if (isSuccess)
            return "bg-gradient-to-r from-emerald-600 to-emerald-700 text-white";

        return IsFormValid()
            ? "bg-gradient-to-r from-ocean-600 to-aqua-600 text-white"
            : "bg-gradient-to-r from-slate-400 to-slate-500 text-white";
    }

    private string GetButtonHoverClass()
    {
        if (isSuccess)
            return "";

        return IsFormValid()
            ? "hover:from-ocean-700 hover:to-aqua-700 hover:scale-[1.02] hover:shadow-2xl"
            : "hover:from-slate-500 hover:to-slate-600";
    }
}
