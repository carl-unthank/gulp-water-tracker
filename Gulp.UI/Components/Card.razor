<div class="@GetCssClasses()" @onclick="OnClick" @attributes="AdditionalAttributes">
    @if (HeaderContent != null)
    {
        <div class="px-6 pt-6 pb-0 border-b border-gray-200 mb-6 pb-4">
            @HeaderContent
        </div>
    }

    @if (ImageUrl != null)
    {
        <img src="@ImageUrl" alt="@ImageAlt" class="w-full h-auto object-cover" />
    }

    <div class="@(NoPadding ? "p-0" : "p-6")">
        @if (!string.IsNullOrEmpty(Title))
        {
            <h5 class="m-0 mb-2 text-lg font-semibold text-gray-700">@Title</h5>
        }

        @if (!string.IsNullOrEmpty(Subtitle))
        {
            <h6 class="m-0 mb-4 text-sm font-medium text-gray-500">@Subtitle</h6>
        }

        @ChildContent
    </div>

    @if (FooterContent != null)
    {
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
            @FooterContent
        </div>
    }
</div>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Subtitle { get; set; }
    [Parameter] public string? ImageUrl { get; set; }
    [Parameter] public string? ImageAlt { get; set; }
    [Parameter] public bool NoPadding { get; set; }
    [Parameter] public bool NoShadow { get; set; }
    [Parameter] public bool Hoverable { get; set; }
    [Parameter] public CardVariant Variant { get; set; } = CardVariant.Default;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetCssClasses()
    {
        var classes = new List<string>
        {
            "bg-white", "rounded-xl", "overflow-hidden", "transition-all", "duration-200", "border"
        };

        // Shadow handling
        if (NoShadow)
            classes.Add("shadow-none");
        else
            classes.Add("shadow-sm");

        // Hoverable state
        if (Hoverable)
        {
            classes.AddRange(new[] { "cursor-pointer", "hover:shadow-lg", "hover:-translate-y-0.5" });
        }

        // Variant border colors
        classes.Add(Variant switch
        {
            CardVariant.Primary => "border-blue-500",
            CardVariant.Secondary => "border-gray-500",
            CardVariant.Success => "border-emerald-500",
            CardVariant.Danger => "border-red-500",
            CardVariant.Warning => "border-amber-500",
            CardVariant.Info => "border-cyan-500",
            _ => "border-gray-200"
        });

        return string.Join(" ", classes);
    }
}
